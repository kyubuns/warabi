class GrowingPacker
  fit: (blocks) ->
    n = undefined
    node = undefined
    block = undefined
    len = blocks.length
    w = if len > 0 then blocks[0].w else 0
    h = if len > 0 then blocks[0].h else 0
    @root =
      x: 0
      y: 0
      w: w
      h: h
    n = 0
    while n < len
      block = blocks[n]
      if node = @findNode(@root, block.w, block.h)
        block.fit = @splitNode(node, block.w, block.h)
      else
        block.fit = @growNode(block.w, block.h)
      n++
    return
  findNode: (root, w, h) ->
    if root.used
      @findNode(root.right, w, h) or @findNode(root.down, w, h)
    else if w <= root.w and h <= root.h
      root
    else
      null
  splitNode: (node, w, h) ->
    node.used = true
    node.down =
      x: node.x
      y: node.y + h
      w: node.w
      h: node.h - h
    node.right =
      x: node.x + w
      y: node.y
      w: node.w - w
      h: h
    node
  growNode: (w, h) ->
    canGrowDown = w <= @root.w
    canGrowRight = h <= @root.h
    shouldGrowRight = canGrowRight and @root.h >= @root.w + w
    # attempt to keep square-ish by growing right when height is much greater than width
    shouldGrowDown = canGrowDown and @root.w >= @root.h + h
    # attempt to keep square-ish by growing down  when width  is much greater than height
    if shouldGrowRight
      @growRight w, h
    else if shouldGrowDown
      @growDown w, h
    else if canGrowRight
      @growRight w, h
    else if canGrowDown
      @growDown w, h
    else
      null
    # need to ensure sensible root starting size to avoid this happening
  growRight: (w, h) ->
    @root =
      used: true
      x: 0
      y: 0
      w: @root.w + w
      h: @root.h
      down: @root
      right:
        x: @root.w
        y: 0
        w: w
        h: @root.h
    if node = @findNode(@root, w, h)
      @splitNode node, w, h
    else
      null
  growDown: (w, h) ->
    @root =
      used: true
      x: 0
      y: 0
      w: @root.w
      h: @root.h + h
      down:
        x: 0
        y: @root.h
        w: @root.w
        h: h
      right: @root
    if node = @findNode(@root, w, h)
      @splitNode node, w, h
    else
      null
## ---
## generated by js2coffee 2.0.3
# https://github.com/jakesgordon/bin-packing/blob/master/js/packer.growing.js



if app.documents.length == 0
  alert('対象のpsdを開いてから実行してください。')
  return

if app.activeDocument.activeLayer.typename != 'LayerSet'
  alert('対象のLayerSetを選択してください。')
  return

targetLayerSet = ''
setup = ->
  preferences.rulerUnits = Units.PIXELS
  targetLayerSet = app.activeDocument.activeLayer

main = ->
  targets = targetLayerSet.artLayers
  blocks = []
  border = UnitValue(2, 'px')
  for layer in targetLayerSet.artLayers
    blocks.push({
      x: layer.bounds[0]
      y: layer.bounds[1]
      w: layer.bounds[2] - layer.bounds[0] + border
      h: layer.bounds[3] - layer.bounds[1] + border
      layer: layer
    })

  packer = new GrowingPacker()
  packer.fit(blocks)

  for block in blocks
    original = [block.x, block.y]
    fix = [UnitValue(block.fit.x, 'px'), UnitValue(block.fit.y, 'px')]
    block.layer.translate(fix[0]-original[0], fix[1]-original[1])

setup()
main()
alert('complete!')
